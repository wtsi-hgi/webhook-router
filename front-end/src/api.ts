/**
 * Webhook router config
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface ModelError {
    "error": string;
    "error_num": string;
}

export interface NewRoute {
    "name": string;
    "destination": string;
    "no_ssl_verification"?: boolean;
}

export interface PatchRoute {
    "name"?: string;
    "destination"?: string;
    "no_ssl_verification"?: boolean;
}

export interface RouteStatistics {
    "num_successes": number;
    "num_failures": number;
    "last_failures": Array<any>;
}

export interface Routes extends Array<Route> {
}

export interface Route {
    "name": string;
    "destination": string;
    "no_ssl_verification": boolean;
    "token": string;
    "uuid": string;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * 
     * @summary Adds an existing route to a user's list of routes
     * @param uuid The uuid of the route
     */
    addRouteLink(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling addRouteLink");
        }
        const baseUrl = `/links/{uuid}`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Creates a new route and adds it to the user's routes
     * @param newRoute 
     */
    createRoute(params: {  "newRoute": NewRoute; }, options?: any): FetchArgs {
        // verify required parameter "newRoute" is set
        if (params["newRoute"] == null) {
            throw new Error("Missing required parameter newRoute when calling createRoute");
        }
        const baseUrl = `/create-route`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["newRoute"]) {
            fetchOptions.body = JSON.stringify(params["newRoute"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Delete the given webhook
     * @param uuid The uuid of the route
     */
    deleteRoute(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling deleteRoute");
        }
        const baseUrl = `/routes/{uuid}`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Removes a user's link
     * @param uuid The uuid of the route
     */
    deleteRouteLink(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling deleteRouteLink");
        }
        const baseUrl = `/links/{uuid}`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Gets all routes that are configured for given user
     */
    getAllRoutes(options?: any): FetchArgs {
        const baseUrl = `/routes`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Gets a route by it's token. Intended to be used by the router when it receives a request
     * @param token The token of the route
     */
    getByToken(params: {  "token": string; }, options?: any): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling getByToken");
        }
        const baseUrl = `/routes/token/{token}`
            .replace(`{${"token"}}`, `${ params["token"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Gets the configuration for the given webhook
     * @param uuid The uuid of the route
     */
    getRoute(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling getRoute");
        }
        const baseUrl = `/routes/{uuid}`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Gets the statistics for a given token
     * @param uuid The uuid of the route
     */
    getRouteStatistics(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling getRouteStatistics");
        }
        const baseUrl = `/routes/{uuid}/statistics`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Edit the configuration of the given webhook
     * @param uuid The uuid of the route
     * @param newInfo 
     */
    patchRoute(params: {  "uuid": string; "newInfo": PatchRoute; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling patchRoute");
        }
        // verify required parameter "newInfo" is set
        if (params["newInfo"] == null) {
            throw new Error("Missing required parameter newInfo when calling patchRoute");
        }
        const baseUrl = `/routes/{uuid}`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PATCH" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["newInfo"]) {
            fetchOptions.body = JSON.stringify(params["newInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Regenerates the token for the given route
     * @param uuid The uuid of the route
     */
    regenerateToken(params: {  "uuid": string; }, options?: any): FetchArgs {
        // verify required parameter "uuid" is set
        if (params["uuid"] == null) {
            throw new Error("Missing required parameter uuid when calling regenerateToken");
        }
        const baseUrl = `/routes/{uuid}/regenerate`
            .replace(`{${"uuid"}}`, `${ params["uuid"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * 
     * @summary Adds an existing route to a user's list of routes
     * @param uuid The uuid of the route
     */
    addRouteLink(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
        const fetchArgs = DefaultApiFetchParamCreator.addRouteLink(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Creates a new route and adds it to the user's routes
     * @param newRoute 
     */
    createRoute(params: { "newRoute": NewRoute;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
        const fetchArgs = DefaultApiFetchParamCreator.createRoute(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Delete the given webhook
     * @param uuid The uuid of the route
     */
    deleteRoute(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.deleteRoute(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Removes a user's link
     * @param uuid The uuid of the route
     */
    deleteRouteLink(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.deleteRouteLink(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Gets all routes that are configured for given user
     */
    getAllRoutes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Routes> {
        const fetchArgs = DefaultApiFetchParamCreator.getAllRoutes(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Gets a route by it's token. Intended to be used by the router when it receives a request
     * @param token The token of the route
     */
    getByToken(params: { "token": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
        const fetchArgs = DefaultApiFetchParamCreator.getByToken(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Gets the configuration for the given webhook
     * @param uuid The uuid of the route
     */
    getRoute(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
        const fetchArgs = DefaultApiFetchParamCreator.getRoute(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Gets the statistics for a given token
     * @param uuid The uuid of the route
     */
    getRouteStatistics(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RouteStatistics> {
        const fetchArgs = DefaultApiFetchParamCreator.getRouteStatistics(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Edit the configuration of the given webhook
     * @param uuid The uuid of the route
     * @param newInfo 
     */
    patchRoute(params: { "uuid": string; "newInfo": PatchRoute;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.patchRoute(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Regenerates the token for the given route
     * @param uuid The uuid of the route
     */
    regenerateToken(params: { "uuid": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
        const fetchArgs = DefaultApiFetchParamCreator.regenerateToken(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Adds an existing route to a user's list of routes
     * @param uuid The uuid of the route
     */
    addRouteLink(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.addRouteLink(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Creates a new route and adds it to the user's routes
     * @param newRoute 
     */
    createRoute(params: {  "newRoute": NewRoute; }, options?: any) {
        return DefaultApiFp.createRoute(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Delete the given webhook
     * @param uuid The uuid of the route
     */
    deleteRoute(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.deleteRoute(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Removes a user's link
     * @param uuid The uuid of the route
     */
    deleteRouteLink(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.deleteRouteLink(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Gets all routes that are configured for given user
     */
    getAllRoutes(options?: any) {
        return DefaultApiFp.getAllRoutes(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Gets a route by it's token. Intended to be used by the router when it receives a request
     * @param token The token of the route
     */
    getByToken(params: {  "token": string; }, options?: any) {
        return DefaultApiFp.getByToken(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Gets the configuration for the given webhook
     * @param uuid The uuid of the route
     */
    getRoute(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.getRoute(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Gets the statistics for a given token
     * @param uuid The uuid of the route
     */
    getRouteStatistics(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.getRouteStatistics(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Edit the configuration of the given webhook
     * @param uuid The uuid of the route
     * @param newInfo 
     */
    patchRoute(params: {  "uuid": string; "newInfo": PatchRoute; }, options?: any) {
        return DefaultApiFp.patchRoute(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Regenerates the token for the given route
     * @param uuid The uuid of the route
     */
    regenerateToken(params: {  "uuid": string; }, options?: any) {
        return DefaultApiFp.regenerateToken(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Adds an existing route to a user's list of routes
         * @param uuid The uuid of the route
         */
        addRouteLink(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.addRouteLink(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new route and adds it to the user's routes
         * @param newRoute 
         */
        createRoute(params: {  "newRoute": NewRoute; }, options?: any) {
            return DefaultApiFp.createRoute(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete the given webhook
         * @param uuid The uuid of the route
         */
        deleteRoute(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.deleteRoute(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes a user's link
         * @param uuid The uuid of the route
         */
        deleteRouteLink(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.deleteRouteLink(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets all routes that are configured for given user
         */
        getAllRoutes(options?: any) {
            return DefaultApiFp.getAllRoutes(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets a route by it's token. Intended to be used by the router when it receives a request
         * @param token The token of the route
         */
        getByToken(params: {  "token": string; }, options?: any) {
            return DefaultApiFp.getByToken(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the configuration for the given webhook
         * @param uuid The uuid of the route
         */
        getRoute(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.getRoute(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the statistics for a given token
         * @param uuid The uuid of the route
         */
        getRouteStatistics(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.getRouteStatistics(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit the configuration of the given webhook
         * @param uuid The uuid of the route
         * @param newInfo 
         */
        patchRoute(params: {  "uuid": string; "newInfo": PatchRoute; }, options?: any) {
            return DefaultApiFp.patchRoute(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Regenerates the token for the given route
         * @param uuid The uuid of the route
         */
        regenerateToken(params: {  "uuid": string; }, options?: any) {
            return DefaultApiFp.regenerateToken(params, options)(fetch, basePath);
        },
    };
};

